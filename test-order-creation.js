const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3000'; // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
const TEST_TOKEN = 'your-jwt-token-here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
const testOrderData = {
  locationId: "2",
  tableId: "test-table-id", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π UUID —Å—Ç–æ–ª–∞
  orderType: "dine_in",
  waiterId: "test-waiter-id", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π UUID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
  customerName: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
  customerPhone: "+79001234567",
  guestCount: 2,
  notes: "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"
};

async function testCreateOrder() {
  try {
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', JSON.stringify(testOrderData, null, 2));

    const response = await axios.post(`${API_BASE_URL}/orders`, testOrderData, {
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    }
    throw error;
  }
}

async function testGetTables() {
  try {
    console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤...');
    
    const response = await axios.get(`${API_BASE_URL}/tables`, {
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`
      }
    });

    console.log('‚úÖ –°—Ç–æ–ª—ã –ø–æ–ª—É—á–µ–Ω—ã!');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤:', response.data.length);
    console.log('–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª:', JSON.stringify(response.data[0], null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    }
    throw error;
  }
}

async function testGetMenuItems() {
  try {
    console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é...');
    
    const response = await axios.get(`${API_BASE_URL}/menu/items`, {
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`
      }
    });

    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω—ã!');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:', response.data.length);
    console.log('–ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', JSON.stringify(response.data[0], null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    }
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...\n');
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤
    const tables = await testGetTables();
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é
    const menuItems = await testGetMenuItems();
    
    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if (tables.length > 0 && menuItems.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
      testOrderData.tableId = tables[0].id;
      testOrderData.waiterId = 'test-waiter-id'; // –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π ID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
      
      await testCreateOrder();
    } else {
      console.log('\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–ª–∞—Ö –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è—Ö –º–µ–Ω—é');
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests();
}

module.exports = {
  testCreateOrder,
  testGetTables,
  testGetMenuItems,
  runTests
};
