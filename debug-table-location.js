const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3000'; // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
const TEST_TOKEN = 'your-jwt-token-here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω

async function debugTableLocation() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –ª–æ–∫–∞—Ü–∏—è–º–∏...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...');
    let payload;
    try {
      payload = JSON.parse(Buffer.from(TEST_TOKEN.split('.')[1], 'base64').toString());
      console.log('JWT payload:', payload);
      console.log('User ID:', payload.sub);
      console.log('Location ID:', payload.location_id);
      console.log('Role:', payload.role);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error.message);
      return;
    }

    const locationId = payload.location_id;
    const userId = payload.sub;

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)...');
    try {
      const allTablesResponse = await axios.get(`${API_BASE_URL}/tables`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–í—Å–µ–≥–æ —Å—Ç–æ–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:', allTablesResponse.data.length);
      
      if (allTablesResponse.data.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ 3 —Å—Ç–æ–ª–∞:');
        allTablesResponse.data.slice(0, 3).forEach((table, index) => {
          console.log(`  ${index + 1}. ID: ${table.id}, –ù–æ–º–µ—Ä: ${table.number}, –õ–æ–∫–∞—Ü–∏—è: ${table.location_id}, –ê–∫—Ç–∏–≤–µ–Ω: ${table.is_active}`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤:', error.response?.data || error.message);
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:', locationId);
    try {
      const filteredTablesResponse = await axios.get(`${API_BASE_URL}/tables?locationId=${locationId}`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–°—Ç–æ–ª—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', filteredTablesResponse.data.length);
      
      if (filteredTablesResponse.data.length > 0) {
        console.log('–°—Ç–æ–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏:');
        filteredTablesResponse.data.forEach((table, index) => {
          console.log(`  ${index + 1}. ID: ${table.id}, –ù–æ–º–µ—Ä: ${table.number}, –õ–æ–∫–∞—Ü–∏—è: ${table.location_id}, –ê–∫—Ç–∏–≤–µ–Ω: ${table.is_active}`);
        });
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Å—Ç–æ–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏!');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:', error.response?.data || error.message);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const userResponse = await axios.get(`${API_BASE_URL}/users/profile`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
        id: userResponse.data.id,
        username: userResponse.data.username,
        role: userResponse.data.role,
        location_id: userResponse.data.location_id
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏...');
    try {
      const locationResponse = await axios.get(`${API_BASE_URL}/locations/${locationId}`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–õ–æ–∫–∞—Ü–∏—è:', {
        id: locationResponse.data.id,
        name: locationResponse.data.name,
        address: locationResponse.data.address
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', error.response?.data || error.message);
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å—Ç–æ–ª–æ–º
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
    try {
      const filteredTablesResponse = await axios.get(`${API_BASE_URL}/tables?locationId=${locationId}`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      
      if (filteredTablesResponse.data.length > 0) {
        const firstTable = filteredTablesResponse.data[0];
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∞:', firstTable);
        
        const testOrderData = {
          locationId: locationId,
          tableId: firstTable.id,
          orderType: "dine_in",
          waiterId: userId,
          customerName: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
          customerPhone: "+79001234567",
          guestCount: 1,
          notes: "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        };
        
        console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', testOrderData);
        
        const orderResponse = await axios.post(`${API_BASE_URL}/orders`, testOrderData, {
          headers: { 
            'Authorization': `Bearer ${TEST_TOKEN}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log('ID –∑–∞–∫–∞–∑–∞:', orderResponse.data.id);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        await axios.delete(`${API_BASE_URL}/orders/${orderResponse.data.id}`, {
          headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
        });
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω');
        
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Å—Ç–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.response?.data || error.message);
    }

    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
if (require.main === module) {
  debugTableLocation();
}

module.exports = { debugTableLocation };

