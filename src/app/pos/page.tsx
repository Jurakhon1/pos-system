"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/shared/ui/card";
import { Button } from "@/shared/ui/button";
import { Input } from "@/shared/ui/input";
import { 
  ShoppingCart, 
  Package, 
  BarChart3, 
  Users, 
  Search,
  Filter,
  Clock,
  CheckCircle,
  Minus,
  Plus,
  Trash2,
  CreditCard,
  ClipboardList,
  FileText,
  Table as TableIcon,
  User
} from "lucide-react";
import Image from "next/image";
import { CartItem } from "@/entities/cart";
import { useMenuItems } from "@/entities/menu-item/hooks/useMenuItem";
import { useCategories } from "@/entities/categories/hooks/useCategories";
import { useTables } from "@/entities/tables/hooks/useTables";
import { Table as TableType } from "@/entities/tables/api/tableApi";
import { RoleGuard } from "@/shared/components/RoleGuard";
import { USER_ROLES } from "@/shared/types/auth";
import { useCart } from "@/entities/cart/hooks/useCart";
import { useOrderCreation } from "@/features/order-creation/hooks/useOrderCreation";

interface Category {
  id: string;
  name: string;
}

interface MenuItem {
  id: string;
  name: string;
  price: number;
  description: string;
  imageUrl?: string;
  categoryId: string;
}

export default function POSPage() {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [customerName, setCustomerName] = useState("");
  const [customerPhone, setCustomerPhone] = useState("");
  const [guestCount, setGuestCount] = useState(1);
  const [tableId, setTableId] = useState<string | null>(null);
  const [tableNumber, setTableNumber] = useState<string | null>(null);
  const [notes, setNotes] = useState("");
  const [orderType, setOrderType] = useState<'dine_in' | 'takeaway'>('dine_in');
  const [searchQuery, setSearchQuery] = useState("");
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [showCustomerForm, setShowCustomerForm] = useState(false);

  const { tables, isLoading, error, fetchTables, updateTableStatus } = useTables();
  const { items: cartItems, addToCart, removeFromCart, updateQuantity, clearCart } = useCart();
  const { createOrder, isCreating } = useOrderCreation();
  const { menuItems } = useMenuItems();
  const { categories } = useCategories();

  useEffect(() => {
    fetchTables();
  }, [fetchTables]);

  const handleCreateOrder = async () => {
    const formData = {
      customerName: customerName,
      customerPhone: customerPhone,
      guestCount: guestCount,
      notes: notes,
      orderType: orderType
    };

    createOrder(
      cartItems,
      tableId,
      formData,
      (order) => {
        console.log('Order created successfully:', order);
        clearCart();
        // Reset form
        setCustomerName('');
        setCustomerPhone('');
        setGuestCount(1);
        setNotes('');
        setTableId('');
        setOrderType('dine_in');
      },
      (error) => {
        console.error('Failed to create order:', error);
        // Handle error (show toast, etc.)
      }
    );
  };

  const totalAmount = cartItems.reduce((total, item) => total + Number(item.price) * item.quantity, 0);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–ª—é–¥ –ø–æ –ø–æ–∏—Å–∫—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredMenuItems = menuItems?.filter((item: MenuItem) => {
    const matchesCategory = selectedCategory === null || item.categoryId === selectedCategory;
    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         item.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const handleQuickOrder = () => {
    if (cartItems.length === 0) return;
    
    if (orderType === 'dine_in' && !tableId) {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ —Å—Ç–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setShowCustomerForm(true);
    } else {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–Ω–æ—Å –∏–ª–∏ —Å—Ç–æ–ª –≤—ã–±—Ä–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å—Ä–∞–∑—É
      handleCreateOrder();
    }
  };

  return (
    <RoleGuard requiredRoles={[USER_ROLES.CASHIER, USER_ROLES.WAITER, USER_ROLES.ADMIN, USER_ROLES.SUPERADMIN, USER_ROLES.MANAGER]}>
      <div className="min-h-screen bg-gray-50">
        {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="bg-white border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-end">
            <div className="flex items-center space-x-2 bg-gray-100 rounded-lg px-4 py-2">
              <Clock className="w-4 h-4 text-gray-500" />
              <span className="text-sm font-medium text-gray-700">
                {new Date().toLocaleTimeString('ru-RU', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                })}
              </span>
            </div>
          </div>
        </div>

        <div className="flex">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –ú–µ–Ω—é */}
          <div className="flex-1 transition-all duration-300 pr-96">
            <div className="p-6">
              {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
              <div className="mb-6">
                <div className="flex items-center space-x-4 mb-4">
                  <div className="flex-1 relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –±–ª—é–¥..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 h-12 text-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                    />
                  </div>
                  <Button
                    variant="outline"
                    onClick={() => setSelectedCategory(null)}
                    className="h-12 px-6"
                  >
                    <Filter className="w-4 h-4 mr-2" />
                    –°–±—Ä–æ—Å–∏—Ç—å
                  </Button>
                </div>

                {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                <div className="flex space-x-2 overflow-x-auto pb-2">
                  <Button
                    variant={selectedCategory === null ? "default" : "outline"}
                    onClick={() => setSelectedCategory(null)}
                    className="whitespace-nowrap px-6 py-3 h-auto"
                  >
                    üçΩÔ∏è –í—Å–µ –±–ª—é–¥–∞
                  </Button>
                  {categories?.map((category: Category) => (
                    <Button
                      key={category.id}
                      variant={selectedCategory === category.id ? "default" : "outline"}
                      onClick={() => setSelectedCategory(category.id)}
                      className="whitespace-nowrap px-6 py-3 h-auto"
                    >
                      {category.name}
                    </Button>
                  ))}
                </div>
              </div>

              {/* –°–ø–∏—Å–æ–∫ –±–ª—é–¥ */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {filteredMenuItems?.map((item: MenuItem) => (
                  <div
                    key={item.id}
                    className="bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-200 border border-gray-200 hover:border-blue-300 group cursor-pointer"
                    onClick={() => addToCart({
                      id: item.id,
                      name: item.name,
                      price: item.price,
                      ...(item.imageUrl && { imageUrl: item.imageUrl }),
                      menuItemId: item.id
                    })}
                  >
                    <div className="relative">
                      <div className="h-48 overflow-hidden rounded-t-xl">
                        {item.imageUrl ? (
                          <Image
                            src={item.imageUrl}
                            alt={item.name}
                            fill
                            className="object-cover group-hover:scale-105 transition-transform duration-200"
                          />
                        ) : (
                          <div className="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                            <span className="text-4xl">üçΩÔ∏è</span>
                          </div>
                        )}
                      </div>
                      <div className="absolute top-3 right-3 bg-blue-600 text-white px-3 py-1 rounded-full text-sm font-bold shadow-lg">
                        {item.price} ‚ÇΩ
                      </div>
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-transform duration-200 rounded-t-xl" />
                    </div>
                    
                    <div className="p-4">
                      <h3 className="font-semibold text-gray-900 mb-2 line-clamp-2 text-lg">{item.name}</h3>
                      <p className="text-gray-600 text-sm line-clamp-2 mb-3">{item.description}</p>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-xl font-bold text-blue-600">{item.price} ‚ÇΩ</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {filteredMenuItems?.length === 0 && (
                <div className="text-center py-16">
                  <div className="text-gray-400 mb-4">
                    <Search className="mx-auto h-16 w-16" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    –ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </h3>
                  <p className="text-gray-500">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–∑–∏–Ω–∞ */}
          <div className="fixed right-0 top-0 h-full w-96 bg-white border-l border-gray-200 shadow-2xl z-50">
            <div className="h-full flex flex-col">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
              <div className="bg-blue-600 px-6 py-4 text-white">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-bold">–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–∫–∞–∑–∞</h2>
                  <div className="flex items-center space-x-2">
                    <ShoppingCart className="w-5 h-5" />
                    <span className="bg-white text-blue-600 text-sm font-bold rounded-full px-2 py-1 min-w-[20px]">
                      {cartItems.length}
                    </span>
                  </div>
                </div>
              </div>

              {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ */}
              <div className="flex-1 overflow-y-auto p-6 space-y-6">
                {/* –¢–∏–ø –∑–∞–∫–∞–∑–∞ */}
                <div className="space-y-3">
                  <label className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                    <CreditCard className="w-4 h-4 text-blue-600" />
                    –¢–∏–ø –∑–∞–∫–∞–∑–∞
                  </label>
                  <div className="grid grid-cols-2 gap-3">
                    <Button
                      variant={orderType === 'dine_in' ? 'default' : 'outline'}
                      onClick={() => setOrderType('dine_in')}
                      className="h-11"
                    >
                      üçΩÔ∏è –ù–∞ –º–µ—Å—Ç–µ
                    </Button>
                    <Button
                      variant={orderType === 'takeaway' ? 'default' : 'outline'}
                      onClick={() => setOrderType('takeaway')}
                      className="h-11"
                    >
                      üì¶ –ù–∞ –≤—ã–Ω–æ—Å
                    </Button>
                  </div>
                </div>

                {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
                <div className="space-y-3">
                  <h3 className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                    <ShoppingCart className="w-4 h-4 text-red-600" />
                    –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
                  </h3>
                  
                  {cartItems.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <ShoppingCart className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                      <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                      <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é</p>
                    </div>
                  ) : (
                    <div className="space-y-3 max-h-64 overflow-y-auto">
                      {cartItems.map((item) => (
                        <div key={item.id} className="bg-gray-50 p-3 rounded-lg border border-gray-200">
                          <div className="flex justify-between items-start mb-2">
                            <span className="font-medium text-gray-800 text-sm">{item.name}</span>
                            <span className="font-bold text-blue-600">{item.price} ‚ÇΩ</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => updateQuantity(item.id, item.quantity - 1)}
                                className="h-8 w-8 p-0"
                              >
                                <Minus className="w-4 h-4" />
                              </Button>
                              <span className="font-semibold text-gray-700 min-w-[2rem] text-center">
                                {item.quantity}
                              </span>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                className="h-8 w-8 p-0"
                              >
                                <Plus className="w-4 h-4" />
                              </Button>
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => removeFromCart(item.id)}
                              className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                  
                  {cartItems.length > 0 && (
                    <Button
                      variant="outline"
                      onClick={clearCart}
                      className="w-full text-red-600 border-red-300 hover:bg-red-50"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                    </Button>
                  )}
                </div>

                {/* –ò—Ç–æ–≥–∏ */}
                {cartItems.length > 0 && (
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
                      <ClipboardList className="w-4 h-4 text-blue-600" />
                      –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞
                    </h3>
                    <div className="space-y-2 mb-4 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">–¢–∏–ø:</span>
                        <span className="font-medium">
                          {orderType === "dine_in" ? "üçΩÔ∏è –ù–∞ –º–µ—Å—Ç–µ" : "üì¶ –ù–∞ –≤—ã–Ω–æ—Å"}
                        </span>
                      </div>
                      <div className="border-t border-blue-200 pt-2 mt-2">
                        <div className="flex justify-between text-lg font-bold">
                          <span>–ò—Ç–æ–≥–æ:</span>
                          <span className="text-blue-600">{totalAmount} ‚ÇΩ</span>
                        </div>
                      </div>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="space-y-3">
                      <Button
                        onClick={handleQuickOrder}
                        disabled={isCreating}
                        className="w-full h-12 text-lg font-semibold bg-green-600 hover:bg-green-700"
                      >
                        {isCreating ? (
                          <>
                            <Clock className="w-5 h-5 mr-2 animate-spin" />
                            –°–æ–∑–¥–∞–Ω–∏–µ...
                          </>
                        ) : (
                          <>
                            <CheckCircle className="w-5 h-5 mr-2" />
                            –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑
                          </>
                        )}
                      </Button>
                      
                      <Button
                        onClick={() => setShowCustomerForm(true)}
                        variant="outline"
                        className="w-full h-11"
                      >
                        <User className="w-4 h-4 mr-2" />
                        –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                        {/* ArrowRight icon was removed from imports, so it's removed here */}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ */}
          {showCustomerForm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold text-gray-900">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h2>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowCustomerForm(false)}
                    className="h-8 w-8 p-0"
                  >
                    {/* X icon was removed from imports, so it's removed here */}
                  </Button>
                </div>

                <div className="space-y-4">
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) */}
                  <div className="space-y-3">
                    <h3 className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                      <User className="w-4 h-4 text-green-600" />
                      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                    </h3>
                    <Input
                      placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
                      value={customerName}
                      onChange={(e) => setCustomerName(e.target.value)}
                      className="h-11"
                    />
                    <Input
                      placeholder="–¢–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
                      value={customerPhone}
                      onChange={(e) => setCustomerPhone(e.target.value)}
                      className="h-11"
                    />
                    <Input
                      type="number"
                      placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"
                      value={guestCount}
                      onChange={(e) => setGuestCount(Number(e.target.value))}
                      min="1"
                      className="h-11"
                    />
                  </div>

                  {/* –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞ */}
                  {orderType === "dine_in" && (
                    <div className="space-y-3">
                      <label className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                        <TableIcon className="w-4 h-4 text-purple-600" />
                        –í—ã–±–æ—Ä —Å—Ç–æ–ª–∞
                      </label>
                      <select
                        value={tableId || ""}
                        onChange={(e) => {
                          const value = e.target.value || null;
                          setTableId(value);
                          const selectedTable = tables?.find((table) => table.id === value);
                          setTableNumber(selectedTable ? selectedTable.number : null);
                        }}
                        className="w-full h-11 px-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª</option>
                        {tables?.map((table) => (
                          <option key={table.id} value={table.id}>
                            –°—Ç–æ–ª {table.number}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}

                  {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
                  <div className="space-y-3">
                    <label className="text-sm font-semibold text-gray-700 flex items-center gap-2">
                      <FileText className="w-4 h-4 text-orange-600" />
                      –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                    </label>
                    <textarea
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∞–ª–ª–µ—Ä–≥–∏–∏..."
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                    />
                  </div>

                  {/* –ö–Ω–æ–ø–∫–∏ */}
                  <div className="flex space-x-3 pt-4">
                    <Button
                      variant="outline"
                      onClick={() => setShowCustomerForm(false)}
                      className="flex-1"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button
                      onClick={handleCreateOrder}
                      disabled={isCreating}
                      className="flex-1 bg-blue-600 hover:bg-blue-700"
                    >
                      {isCreating ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </RoleGuard>
  );
}
