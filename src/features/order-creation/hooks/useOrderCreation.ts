import { useCallback } from 'react';
import { useOrders } from '@/entities/orders/hooks/useOrders';
import { useAuth } from '@/entities/auth/hooks/useAuth';
import { CreateOrderFromCart } from '@/shared/types/orders';
import { CartItem } from '@/entities/cart';

export interface OrderFormData {
  customerName: string;
  customerPhone: string;
  guestCount: number;
  notes: string;
  orderType: 'dine_in' | 'takeaway';
}

export const useOrderCreation = () => {
  const { createOrderFromCart, isCreatingFromCart } = useOrders();
  const { getCurrentUserId, getCurrentLocationId } = useAuth();

  const createOrder = useCallback((
    cartItems: CartItem[],
    tableId: string | null,
    formData: OrderFormData,
    onSuccess?: (data: any) => void,
    onError?: (error: any) => void
  ) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    if (cartItems.length === 0) {
      onError?.({ message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const invalidItems = cartItems.filter(item => item.quantity <= 0);
    if (invalidItems.length > 0) {
      onError?.({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const userId = getCurrentUserId();
    if (!userId) {
      onError?.({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º locationId –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const locationId = getCurrentLocationId();
    if (!locationId) {
      onError?.({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç Debug info:', {
      userId,
      locationId,
      tableId,
      orderType: formData.orderType,
      cartItemsCount: cartItems.length
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tableId —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞—Ü–∏–∏
    if (tableId) {
      console.log('üîç Table validation:', {
        tableId,
        locationId,
        tableIdType: typeof tableId,
        locationIdType: typeof locationId
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!formData.customerName.trim()) {
      onError?.({ message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞' });
      return;
    }

    if (!formData.customerPhone.trim()) {
      onError?.({ message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞' });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–æ–ª–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    if (formData.orderType === 'dine_in' && !tableId) {
      onError?.({ message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å menuItemId
    const itemsWithoutMenuItemId = cartItems.filter(item => !item.menuItemId);
    if (itemsWithoutMenuItemId.length > 0) {
      console.error('Items without menuItemId:', itemsWithoutMenuItemId);
      onError?.({ message: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –∏–º–µ—é—Ç ID –º–µ–Ω—é' });
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –±—ç–∫–µ–Ω–¥—É
    const orderData: CreateOrderFromCart = {
      locationId: locationId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º locationId –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      tableId: tableId || undefined,
      orderType: formData.orderType,
      waiterId: userId,
      customerName: formData.customerName.trim(),
      customerPhone: formData.customerPhone.trim(),
      guestCount: formData.guestCount,
      notes: formData.notes.trim() || '–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ POS —Å–∏—Å—Ç–µ–º—É',
      items: cartItems.map(item => ({
        menuItemId: item.menuItemId!, // –£–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
        quantity: item.quantity,
        specialInstructions: formData.notes.trim() || undefined
      }))
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Creating order with data:', orderData);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
    createOrderFromCart(orderData, {
      onSuccess: (data) => {
        console.log('Order created successfully:', data);
        onSuccess?.(data);
      },
      onError: (error) => {
        console.error('Failed to create order:', error);
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error.response?.data) {
          console.error('Error response data:', error.response.data);
        }
        onError?.(error);
      }
    });
  }, [createOrderFromCart, getCurrentUserId, getCurrentLocationId]);

  return {
    createOrder,
    isCreating: isCreatingFromCart,
  };
};
