const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3000'; // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
const TEST_TOKEN = 'your-jwt-token-here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω

async function debugOrderCreation() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...');
    try {
      const payload = JSON.parse(Buffer.from(TEST_TOKEN.split('.')[1], 'base64').toString());
      console.log('JWT payload:', payload);
      console.log('User ID:', payload.sub);
      console.log('Location ID:', payload.location_id);
      console.log('Role:', payload.role);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error.message);
      return;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏...');
    try {
      const tablesResponse = await axios.get(`${API_BASE_URL}/tables`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–°—Ç–æ–ª—ã –ø–æ–ª—É—á–µ–Ω—ã:', tablesResponse.data.length);
      if (tablesResponse.data.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª:', {
          id: tablesResponse.data[0].id,
          number: tablesResponse.data[0].number,
          location_id: tablesResponse.data[0].location_id
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤:', error.response?.data || error.message);
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏...');
    try {
      const menuResponse = await axios.get(`${API_BASE_URL}/menu/items`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω—ã:', menuResponse.data.length);
      if (menuResponse.data.length > 0) {
        console.log('–ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', {
          id: menuResponse.data[0].id,
          name: menuResponse.data[0].name,
          location_id: menuResponse.data[0].location_id
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é:', error.response?.data || error.message);
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏...');
    try {
      const categoriesResponse = await axios.get(`${API_BASE_URL}/menu/categories`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', categoriesResponse.data.length);
      if (categoriesResponse.data.length > 0) {
        console.log('–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
          id: categoriesResponse.data[0].id,
          name: categoriesResponse.data[0].name,
          location_id: categoriesResponse.data[0].location_id
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.response?.data || error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const userResponse = await axios.get(`${API_BASE_URL}/users/profile`, {
        headers: { 'Authorization': `Bearer ${TEST_TOKEN}` }
      });
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
        id: userResponse.data.id,
        username: userResponse.data.username,
        role: userResponse.data.role,
        location_id: userResponse.data.location_id
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
    }

    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
if (require.main === module) {
  debugOrderCreation();
}

module.exports = { debugOrderCreation };

