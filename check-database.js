const mysql = require('mysql2/promise');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  host: 'localhost',
  user: 'root', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  password: '', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
  database: 'smartchef' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã
};

async function checkDatabase() {
  let connection;
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É locations
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã locations...');
    const [locations] = await connection.execute('SELECT * FROM locations LIMIT 5');
    console.log('–õ–æ–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ:', locations.length);
    if (locations.length > 0) {
      console.log('–ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è:', locations[0]);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users...');
    const [users] = await connection.execute('SELECT id, username, role, location_id FROM users LIMIT 5');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:', users.length);
    if (users.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      users.forEach((user, index) => {
        console.log(`  ${index + 1}. ID: ${user.id}, Username: ${user.username}, Role: ${user.role}, Location: ${user.location_id}`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tables
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã tables...');
    const [tables] = await connection.execute('SELECT * FROM tables LIMIT 10');
    console.log('–°—Ç–æ–ª—ã –≤ –±–∞–∑–µ:', tables.length);
    if (tables.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ —Å—Ç–æ–ª—ã:');
      tables.forEach((table, index) => {
        console.log(`  ${index + 1}. ID: ${table.id}, –ù–æ–º–µ—Ä: ${table.number}, –õ–æ–∫–∞—Ü–∏—è: ${table.location_id}, –ê–∫—Ç–∏–≤–µ–Ω: ${table.is_active}`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É menu_items
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã menu_items...');
    const [menuItems] = await connection.execute('SELECT * FROM menu_items LIMIT 5');
    console.log('–ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –≤ –±–∞–∑–µ:', menuItems.length);
    if (menuItems.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é:');
      menuItems.forEach((item, index) => {
        console.log(`  ${index + 1}. ID: ${item.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${item.name}, –õ–æ–∫–∞—Ü–∏—è: ${item.location_id}, –ê–∫—Ç–∏–≤–Ω–∞: ${item.is_active}`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID = 2)
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Å ID = 2...');
    const [location2] = await connection.execute('SELECT * FROM locations WHERE id = ?', ['2']);
    if (location2.length > 0) {
      console.log('–õ–æ–∫–∞—Ü–∏—è —Å ID = 2:', location2[0]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
      const [tablesForLocation2] = await connection.execute('SELECT * FROM tables WHERE location_id = ?', ['2']);
      console.log('–°—Ç–æ–ª—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ 2:', tablesForLocation2.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
      const [usersForLocation2] = await connection.execute('SELECT id, username, role FROM users WHERE location_id = ?', ['2']);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ 2:', usersForLocation2.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
      const [menuForLocation2] = await connection.execute('SELECT id, name FROM menu_items WHERE location_id = ?', ['2']);
      console.log('–ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ 2:', menuForLocation2.length);
    } else {
      console.log('‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è —Å ID = 2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ UUID...');
    const [sampleTable] = await connection.execute('SELECT id FROM tables LIMIT 1');
    if (sampleTable.length > 0) {
      const tableId = sampleTable[0].id;
      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(tableId);
      console.log('ID —Å—Ç–æ–ª–∞:', tableId);
      console.log('–≠—Ç–æ UUID?', isUUID);
      console.log('–î–ª–∏–Ω–∞ ID:', tableId.length);
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkDatabase();
}

module.exports = { checkDatabase };

